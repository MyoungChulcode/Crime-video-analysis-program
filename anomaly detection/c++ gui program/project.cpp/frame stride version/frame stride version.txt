//  Project.cpp: implementation of CProject (main project class you will write)
//	Dept. Software Convergence, Kyung Hee University
//	Prof. Daeho Lee, nize@khu.ac.kr
//

#include "KhuCvApp.h"
#include "Project.h"

#ifdef _MSC_VER
#ifdef _DEBUG
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
#define DEBUG_NEW new(_NORMAL_BLOCK, __FILE__, __LINE__)
#define new DEBUG_NEW
#endif
#endif

CProject::CProject() {
#ifdef UNICODE
	GetModuleFileName(NULL, m_ExePathUnicode, MAX_PATH);
	int len = WideCharToMultiByte(CP_ACP, 0, m_ExePathUnicode, -1, NULL, 0, NULL, NULL);
	WideCharToMultiByte(CP_ACP, 0, m_ExePathUnicode, -1, m_ExePath, len, NULL, NULL);
#else
	GetModuleFileName(NULL, m_ExePath, MAX_PATH);
	int len = MultiByteToWideChar(CP_ACP, 0, m_ExePath, -1, NULL, 0);
	MultiByteToWideChar(CP_ACP, 0, m_ExePath, -1, m_ExePathUnicode, len);
#endif

	int i;
	int LastBackSlash = -1;
	int nLen = strlen(m_ExePath);
	for (i = nLen - 1; i >= 0; i--)
	{
		if (m_ExePath[i] == '\\') {
			LastBackSlash = i;
			break;
		}
	}

	if (LastBackSlash >= 0)
		m_ExePath[LastBackSlash] = '\0';

	LastBackSlash = -1;
	nLen = wcslen(m_ExePathUnicode);
	for (i = nLen - 1; i >= 0; i--)
	{
		if (m_ExePathUnicode[i] == L'\\') {
			LastBackSlash = i;
			break;
		}
	}

	if (LastBackSlash >= 0)
		m_ExePathUnicode[LastBackSlash] = L'\0';

	wchar_t C3dPath[MAX_PATH];
	wcscpy(C3dPath, m_ExePathUnicode);
	wcscat(C3dPath, L"/feature_extractor.onnx");
	m_pC3d = new C3D(C3dPath);

	wchar_t AnomalyPath[MAX_PATH];
	wcscpy(AnomalyPath, m_ExePathUnicode);
	wcscat(AnomalyPath, L"/anomaly_detector.onnx");
	m_pAnomaly = new Anomaly(AnomalyPath);
}

CProject::~CProject() {
	delete m_pC3d;
	delete m_pAnomaly;
}

std::vector<float> linspace(float start_in, float end_in, int num_in) {
	std::vector<float> linspaced;

	float start = static_cast<float>(start_in);
	float end = static_cast<float>(end_in);
	float num = static_cast<float>(num_in);

	if (num == 0) { return linspaced; }
	if (num == 1) {
		linspaced.push_back(start);
		return linspaced;
	}

	float delta = (end - start) / (num - 1);

	for (int i = 0; i < num - 1; ++i) {
		linspaced.push_back(start + delta * i);
	}
	linspaced.push_back(end);
							 
	return linspaced;
}

/*
void CProject::GetExecutionPath() {
	wxFileName f(wxStandardPaths::Get().GetExecutablePath());
	wxString appPath(f.GetPath());

	wcscpy(m_ExePathUnicode, appPath);
	strcpy(m_ExePath, appPath.c_str());
}
*/


void CProject::Run(cv::Mat Input, cv::Mat& Output, bool bFirstRun, bool bVerbose, int FrameCnt, int FrameCur) {
	m_totalSequence = FrameCnt / 16;

	// convert input image to RGB vector
	cv::Mat C3dFrame;
	cv::Mat BGR[3];
	cv::resize(Input, C3dFrame, cv::Size(112, 112), 0, 0, cv::INTER_AREA);
	cv::split(C3dFrame, BGR);
	BGR[0].convertTo(BGR[0], CV_32FC1);
	BGR[1].convertTo(BGR[1], CV_32FC1);
	BGR[2].convertTo(BGR[2], CV_32FC1);

	m_C3dInputB.push_back(BGR[0]);
	m_C3dInputG.push_back(BGR[1]);
	m_C3dInputR.push_back(BGR[2]);


	if (m_C3dInputR.size() >= 16) {
		// C3d feature extraction
		float* output = m_pC3d->input_image_.data();

		for (int i = 0; i < 16; ++i) {
			memcpy(output + 0 * 16 * 112 * 112 + 112 * 112 * i, m_C3dInputB[i].data, sizeof(float) * 112 * 112);
			memcpy(output + 1 * 16 * 112 * 112 + 112 * 112 * i, m_C3dInputG[i].data, sizeof(float) * 112 * 112);
			memcpy(output + 2 * 16 * 112 * 112 + 112 * 112 * i, m_C3dInputR[i].data, sizeof(float) * 112 * 112);
		}

		m_pC3d->FeatureExtraction_Run();
		cv::Mat cvFeature(64, 64, CV_32FC1);
		memcpy(cvFeature.data, m_pC3d->feature_results_.data(), 4096 * sizeof(float));
		DisplayImage(cvFeature, Input.cols * 2, 0, false, true);

		// frame stride: 4
		m_frameStride = 4;
		m_C3dInputB.erase(m_C3dInputB.begin(), m_C3dInputB.begin() + m_frameStride);
		m_C3dInputG.erase(m_C3dInputG.begin(), m_C3dInputG.begin() + m_frameStride);
		m_C3dInputR.erase(m_C3dInputR.begin(), m_C3dInputR.begin() + m_frameStride);



		// video file anomaly detection(L2 normalization)
		m_featureNorm = 0, m_featureSquareSum = 0;
		for (int i = 0; i < std::size(m_pC3d->feature_results_); i++) {
			m_featureSquareSum += std::pow(std::abs(m_pC3d->feature_results_[i]), 2);
		}
		m_featureNorm = std::sqrt(m_featureSquareSum);
		DlgPrintf("m_featureNorm %f", m_featureNorm);
		for (int i = 0; i < std::size(m_pC3d->feature_results_); i++) {
			m_pC3d->feature_results_[i] = m_pC3d->feature_results_[i] / m_featureNorm;
		}

		memcpy(m_pAnomaly->input_feature_.data(), m_pC3d->feature_results_.data(), 4096 * sizeof(float));

		m_pAnomaly->AnomalyDetection_Run();

		// anomaly detection(score)
		float* scores = (float*)(m_pAnomaly->anomaly_results_.data());
		m_anomalyScores = (int)(*scores * 100);
		m_anomalyScoresVec.push_back(m_anomalyScores);

		DlgPrintf("*********************************");
		DlgPrintf("Anomaly Score %d", m_anomalyScores);
		DlgPrintf("*********************************");

		if (FrameCur <= 15) {
			m_graphImage = cv::Mat(100, 1000, CV_8UC3, cv::Scalar(255, 255, 255));
			m_loadingNum = 0;
			m_p0 = cv::Point(0, 100);
		}

		m_p1 = cv::Point((1000 / m_totalSequence) * ((float)m_frameStride / 16) * m_loadingNum, 101 - (int)(m_anomalyScoresVec[m_loadingNum]) - 1);

		if (m_anomalyScoresVec[m_loadingNum] > 50.) {
			cv::line(m_graphImage, m_p0, m_p1, cv::Scalar(0, 0, 0), 2);
		}
		else {
			cv::line(m_graphImage, m_p0, m_p1, cv::Scalar(0, 0, 0), 2);
		}
		m_p0 = m_p1;
		++m_loadingNum;

		DisplayImage(m_graphImage, 0, Input.rows, false, true);
	}
	m_PreviousImage = Input.clone();
}